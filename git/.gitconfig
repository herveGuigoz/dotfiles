# You can also add the following aliases to your bash file,
# either ~/.bashrc or ~/.bash_profile depending on your envionment
# (for Windows, you'll have to create ".bat" or ".cmd" files in your %PATH%)

[user]
			email = 
			name = 

[color]
    	# Enable colors for all output from git
    	# Useful when you have to view diffs or status
    	ui = always

[push]
    	# Avoid writing "-u" everytime you push, it will set the upstream if no refspec is given
    	default = current

[pull]
			rebase = true

[core]
    	editor = vim
    
    	# Automatically adds the user-related .gitignore file globally
    	# Remember to add default files to the global .gitignore !
    	# Some like thumbs.db (win), .DS_STORE (Mac) or IDE likes: .nbproject, .idea, .xcodeproj, etc.
    	excludesfile = ~/.gitignore

    	# This will warn you about trailing spaces at end of lines
    	whitespace = trailing-space

    	# Force the index to use "LF" line endings.
    	autocrlf = input

    	# Change the line ending style for the working directory
    	eol = lf

    	# Forces the Git pager to quit when the datas are not higher than the terminal.
    	# For small logs, it will simply display it in the terminal,
    	#   and for high logs, it will send it to `less` and use its console pagination system.
    	# This prevents wrong `less` implementations to override this cool behavior
    	pager = less -X -F

[alias]
    	# Tools to save time
    	f = fetch --all            # Fetches all your repositories
    	fp = fetch --all --prune   # Fetches all your repositories and removes refs that do not exist anymore remotely
    	b = branch -a --column     # List all branches in columns for more readability. Git 1.7.11 at least.
    	bl = branch -av            # List all branches and show their HEAD pointer
    	r = remote -v              # List all remotes and show their urls.
    	undo = reset --soft HEAD~1 # Removes the last commit, but don't erase all modifications
    	rbc = rebase --continue    # Continue rebasing (mostly after fixing conflicts).
    	up = !git pull --rebase --prune $@ && git submodule update --init --recursive # Get working directory up to date.

    	# List all tags with their author and date of release (better than "git tag -l")
    	# Two different methods because the rendered tags are not the same.
    	# This one shows the refs as they are stored in Git
    	tagrefs = for-each-ref 'refs/tags' --sort='taggerdate' --format='%(tag) - %(taggerdate) - %(taggername)'
    	# This one shows the commits that are linked with a tag, so the result is not exactly the same
    	taglist = log --color=always --pretty=format:'%Cred%h%Creset %C(yellow)%D%Creset - %C(green)%cd%Creset %s %C(bold blue)<%an>%Creset' --simplify-by-decoration

    	# Shows all commits formatted like this:
    	# [0a1b2c3] Commit Title  Commit Description
    	# This is very useful if you want to create nice changelogs in your releases, like in Github
    	changelogs = log --pretty=format:'[%h] %s'
    
    	# Display all local branches in the order of their last commit, allowing to see what you worked on when.
    	lb = for-each-ref --sort='-authordate:iso8601' --format=' %(color:green)%(authordate:iso8601)%09%(color:white)%(refname:short)' refs/heads

    	# Shows a beautiful tree of the current branch
    	tree = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s'

    	# A beautiful graph to show the repository tree with all remotes and branches
    	graph = log --all --color=always --graph --pretty=format:'%Cred%h%Cgreen (%ci)%Creset -%C(yellow)%d%Creset %s  %C(bold blue)<%an>%Creset'

    	# Sometimes, when you do lots of rebasing/squashing, your git directory becomes very heavy.
    	# With this command, git automatically removes any orphan blob in the .git/ directory.
    	# Tested and approved! For a very often rebased repo, turned it from 4.8GB to 350MB... üòâ
    	gcall = -c gc.reflogExpire=0 -c gc.reflogExpireUnreachable=0 -c gc.rerereresolved=0 -c gc.rerereunresolved=0 -c gc.pruneExpire=now gc --aggressive
      
			# Commit message types
			cfeat = "!f() { git commit -m \"‚ú® feat: $@\"; }; f"				 # FEAT.
			cfix = "!f() { git commit -m \"üëå fix: $@\"; }; f" 						# FIX.
			cdoc = "!f() { git commit -m \"üìñ docs: $@\"; }; f" 					# DOCS.
			cstyle = "!f() { git commit -m \"üíÑ style: $@\"; }; f" 			# STYLE
			crefactor = "!f() { git commit -m \"üî• refactor: $@\"; }; f" # REFACTOR
			cperf = "!f() { git commit -m \"üìà perf: $@\"; }; f" 				# PERF
			ctest = "!f() { git commit -m \"‚úÖ test: $@\"; }; f"					 # TEST
			cbuild = "!f() { git commit -m \"üì¶ build: $@\"; }; f"				# BUILD
			cci = "!f() { git commit -m \"üíö ci: $@\"; }; f"							# CI
			clocalize = "!f() { git commit -m \"üëΩ localize: $@\"; }; f" # LOCALIZE
			crvrt = "!f() { git commit -m \"‚è™ revert: $@\"; }; f"			 # REVERT
			crlz = "!f() { git commit -m \"üöÄ release: $@\"; }; f"				# RELEASE.

    	# Show aliases.
    	al = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
	
[credential "https://github.com"]
        helper = !/usr/local/bin/gh auth git-credential
